// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "forge-std/Script.sol";
import "../contracts/core/vrf/OmniDragonVRFConsumerV2_5.sol";

contract DeployVanityVRFConsumer is Script {
    // VANITY ADDRESS CONFIGURATION
    // Generated by Rust vanity generator - 0x69...777 pattern
    bytes32 constant VRF_VANITY_SALT = 0x5cfc70690f62cf1a85ca70215b649d6c9f8e3f8db6632789c322a765a2920d07;
    address constant EXPECTED_VRF_ADDRESS = 0x6950E5a8D52cAa91a11606ffa7f45Ba27b4Aa777;
    
    // CREATE2 Factory with Ownership
    address constant OMNI_CREATE2_FACTORY = 0xAA28020DDA6b954D16208eccF873D79AC6533833;
    
    // VRF V2.5 Configuration (from .env)
    address constant ARBITRUM_ENDPOINT = 0x1a44076050125825900e736c501f859c50fE728c;
    address constant VRF_COORDINATOR = 0x3C0Ca683b403E37668AE3DC4FB62F4B29B6f7a3e;
    uint256 constant SUBSCRIPTION_ID = 49130512167777098004519592693541429977179420141459329604059253338290818062746;
    bytes32 constant KEY_HASH_30_GWEI = 0x8472ba59cf7134dfe321f4d61a430c4857e8b19cdd5230b09952a92671c24409;
    
    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);
        
        console.log("=== VANITY VRF CONSUMER V2.5 DEPLOYMENT ===");
        console.log("Deployer:", deployer);
        console.log("Chain ID:", block.chainid);
        console.log("Expected Address:", EXPECTED_VRF_ADDRESS);
        console.log("Salt:", vm.toString(VRF_VANITY_SALT));
        console.log("CREATE2 Factory:", OMNI_CREATE2_FACTORY);
        console.log("");
        
        // Verify we're on Arbitrum
        require(block.chainid == 42161, "This script is for Arbitrum mainnet only");
        
        vm.startBroadcast(deployerPrivateKey);
        
        // Get bytecode with constructor args
        bytes memory bytecode = abi.encodePacked(
            type(OmniDragonVRFConsumerV2_5).creationCode,
            abi.encode(
                0x69D485e1c69e2fB0B9Be0b800427c69D51d30777    // OmniDragonRegistry address on Arbitrum
            )
        );
        
        // Calculate actual CREATE2 address using the factory
        address actualAddress = vm.computeCreate2Address(
            VRF_VANITY_SALT,
            keccak256(bytecode),
            OMNI_CREATE2_FACTORY
        );
        
        console.log("Calculated Address:", actualAddress);
        console.log("VRF Coordinator:", VRF_COORDINATOR);
        console.log("Subscription ID:", SUBSCRIPTION_ID);
        console.log("Key Hash:", vm.toString(KEY_HASH_30_GWEI));
        
        if (actualAddress != EXPECTED_VRF_ADDRESS) {
            console.log("WARNING: Address mismatch!");
            console.log("Expected:", EXPECTED_VRF_ADDRESS);
            console.log("Actual:  ", actualAddress);
            console.log("Using actual calculated address...");
        }
        
        // Deploy using CREATE2FactoryWithOwnership
        (bool success, bytes memory returnData) = OMNI_CREATE2_FACTORY.call(
            abi.encodeWithSignature(
                "deploy(bytes,bytes32,string)", 
                bytecode, 
                VRF_VANITY_SALT, 
                "OmniDragonVRFConsumerV2_5"
            )
        );
        
        if (!success) {
            if (returnData.length > 0) {
                assembly {
                    let returndata_size := mload(returnData)
                    revert(add(32, returnData), returndata_size)
                }
            } else {
                revert("Factory deployment failed with no reason");
            }
        }
        
        // Get the deployed VRF consumer instance
        OmniDragonVRFConsumerV2_5 vrfConsumer = OmniDragonVRFConsumerV2_5(payable(actualAddress));
        
        // Configure VRF parameters after deployment
        console.log("Setting VRF configuration...");
        vrfConsumer.setVRFConfig(
            VRF_COORDINATOR,     // VRF Coordinator
            SUBSCRIPTION_ID,     // Subscription ID  
            KEY_HASH_30_GWEI     // Key hash
        );
        
        vm.stopBroadcast();
        
        console.log("");
        console.log("DEPLOYMENT SUCCESSFUL!");
        console.log("==============================");
        console.log("VRF Consumer Address:", address(vrfConsumer));
        console.log("Owner:", vrfConsumer.owner());
        console.log("Endpoint:", address(vrfConsumer.endpoint()));
        console.log("VRF Coordinator:", address(vrfConsumer.vrfCoordinator()));
        console.log("Subscription ID:", vrfConsumer.subscriptionId());
        console.log("Key Hash:", vm.toString(vrfConsumer.keyHash()));
        
        // Verify deployment
        require(vrfConsumer.owner() == deployer, "Owner mismatch");
        require(address(vrfConsumer.endpoint()) == ARBITRUM_ENDPOINT, "Endpoint mismatch");
        require(address(vrfConsumer.vrfCoordinator()) == VRF_COORDINATOR, "VRF Coordinator mismatch");
        require(vrfConsumer.subscriptionId() == SUBSCRIPTION_ID, "Subscription ID mismatch");
        require(vrfConsumer.keyHash() == KEY_HASH_30_GWEI, "Key hash mismatch");
        
        console.log("Final deployed address:", address(vrfConsumer));
        
        // Check for vanity pattern (example: VRF...2525)
        string memory addrStr = vm.toString(address(vrfConsumer));
        console.log("Address string:", addrStr);
        
        // Pattern analysis
        uint160 addrInt = uint160(address(vrfConsumer));
        console.log("Address as hex: 0x", vm.toString(addrInt));
        
        console.log("");
        console.log("VERIFICATION PASSED");
        console.log("VRF Consumer V2.5 ready for Chainlink integration!");
        
        console.log("");
        console.log("NEXT STEPS:");
        console.log("===========");
        console.log("1. Add this contract to VRF subscription as consumer");
        console.log("2. Fund contract with ETH for LayerZero fees");
        console.log("3. Set as localVRFConsumer in LotteryManager");
        console.log("4. Authorize LotteryManager for local VRF calls");
        
        console.log("");
        console.log("INTEGRATION COMMANDS:");
        console.log("====================");
        console.log("// Fund with ETH for LayerZero fees:");
        console.log("cast send", address(vrfConsumer), "--value 0.01ether");
        console.log("");
        console.log("// Set in LotteryManager:");
        console.log("lotteryManager.setLocalVRFConsumer(", address(vrfConsumer), ")");
        console.log("");
        console.log("// Authorize LotteryManager:");
        console.log("vrfConsumer.setLocalCallerAuthorization(lotteryManagerAddress, true)");
    }
}